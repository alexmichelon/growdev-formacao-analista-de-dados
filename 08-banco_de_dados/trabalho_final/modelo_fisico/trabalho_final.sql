-- MySQL Script generated by Alex Michelon
-- Sat Jul 29 09:46:31 2023
-- Model: Trabalho Final Banco de Dados    Version: 1.0

-- -----------------------------------------------------
-- DATABASE trabalho_final_db
-- Deleta, se não existe, cria e seta o banco de dados do exercício
-- -----------------------------------------------------
DROP DATABASE IF EXISTS trabalho_final_db;
CREATE DATABASE IF NOT EXISTS trabalho_final_db;
USE trabalho_final_db ;

-- -----------------------------------------------------
-- Table trabalho_final_db.tipo_pessoa
-- Tipo de pessoa utilizada: Física e Jurídica
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.tipo_pessoa (
  id INT NOT NULL AUTO_INCREMENT,
  descricao VARCHAR(45) NOT NULL,
  PRIMARY KEY (id)
);

-- -----------------------------------------------------
-- Table trabalho_final_db.pessoa
-- Informações inerentes a qualquer tipo de pessoa
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.pessoa (
  id INT NOT NULL AUTO_INCREMENT,
  nome VARCHAR(45) NOT NULL,
  documento VARCHAR(13) NOT NULL,
  email VARCHAR(30) NOT NULL,
  tipo_pessoa_id INT NOT NULL,
  PRIMARY KEY (id, tipo_pessoa_id),
  UNIQUE INDEX documento_UNIQUE (documento ASC) VISIBLE,
  INDEX fk_pessoa_tipo_pessoa1_idx (tipo_pessoa_id ASC) VISIBLE,
  UNIQUE INDEX email_UNIQUE (email ASC) VISIBLE,
  CONSTRAINT fk_pessoa_tipo_pessoa1
    FOREIGN KEY (tipo_pessoa_id)
    REFERENCES trabalho_final_db.tipo_pessoa (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.pessoa_fisica
-- Informações inerentes a pessoa física
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.pessoa_fisica (
  id INT NOT NULL AUTO_INCREMENT,
  pessoa_id INT NOT NULL,
  sexo CHAR(1) NOT NULL,
  data_nascimento DATE NULL,
  nome_pai VARCHAR(60) NULL,
  nome_mae VARCHAR(60) NULL,
  estado_civil VARCHAR(20) NULL,
  PRIMARY KEY (id, pessoa_id),
  INDEX fk_pessoa_fisica_pessoa1_idx (pessoa_id ASC) VISIBLE,
  CONSTRAINT fk_pessoa_fisica_pessoa1
    FOREIGN KEY (pessoa_id)
    REFERENCES trabalho_final_db.pessoa (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.pessoa_juridica
-- Informações inerentes a pessoa jurídica
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.pessoa_juridica (
  id INT NOT NULL AUTO_INCREMENT,
  nome_fantasia VARCHAR(45) NOT NULL,
  inscricao_estadual VARCHAR(15) NOT NULL,
  pessoa_id INT NOT NULL,
  PRIMARY KEY (id, pessoa_id),
  INDEX fk_pessoa_juridica_pessoa1_idx (pessoa_id ASC) VISIBLE,
  CONSTRAINT fk_pessoa_juridica_pessoa1
    FOREIGN KEY (pessoa_id)
    REFERENCES trabalho_final_db.pessoa (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.endereco
-- Informações a inerente a qualquer tipo de endereçco
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.endereco (
  id INT NOT NULL AUTO_INCREMENT,
  rua VARCHAR(60) NOT NULL,
  numero VARCHAR(8) NOT NULL,
  complemento VARCHAR(20) NOT NULL,
  bairro VARCHAR(30) NOT NULL,
  cidade VARCHAR(45) NOT NULL,
  uf CHAR(2) NOT NULL,
  cep VARCHAR(20) NOT NULL,
  PRIMARY KEY (id)
);

-- -----------------------------------------------------
-- Table trabalho_final_db.tipo_endereco
-- Referência do tipo de endereço informado: comercial, residencial, matriz, filial, etc
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.tipo_endereco (
  id INT NOT NULL AUTO_INCREMENT,
  descricao VARCHAR(45) NOT NULL,
  PRIMARY KEY (id)
);

-- -----------------------------------------------------
-- Table trabalho_final_db.endereco_pessoa_fisica
-- Informações de referencia a enredecos de uma pessoa fisica, supondo de que esta podera possuir mais de um endereco cadastrado
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.endereco_pessoa_fisica (
  pessoa_fisica_id INT NOT NULL,
  endereco_id INT NOT NULL,
  tipo_endereco_id INT NOT NULL,
  preferencial CHAR(1) BINARY NOT NULL,
  PRIMARY KEY (pessoa_fisica_id, endereco_id, tipo_endereco_id),
  INDEX fk_endereco_has_pessoa_fisica_pessoa_fisica1_idx (pessoa_fisica_id ASC) VISIBLE,
  INDEX fk_endereco_has_pessoa_fisica_endereco1_idx (endereco_id ASC) VISIBLE,
  INDEX fk_endereco_has_pessoa_fisica_tipo_endereco1_idx (tipo_endereco_id ASC) VISIBLE,
  CONSTRAINT fk_endereco_has_pessoa_fisica_endereco1
    FOREIGN KEY (endereco_id)
    REFERENCES trabalho_final_db.endereco (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_endereco_has_pessoa_fisica_pessoa_fisica1
    FOREIGN KEY (pessoa_fisica_id)
    REFERENCES trabalho_final_db.pessoa_fisica (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_endereco_has_pessoa_fisica_tipo_endereco1
    FOREIGN KEY (tipo_endereco_id)
    REFERENCES trabalho_final_db.tipo_endereco (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.endereco_pessoa_juridica
-- Informações de referencia a enredecos de uma pessoa juridica, supondo de que esta podera possuir mais de um endereco cadastrado
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.endereco_pessoa_juridica (
  pessoa_juridica_id INT NOT NULL,
  endereco_id INT NOT NULL,
  tipo_endereco_id INT NOT NULL,
  preferencial CHAR(1) BINARY NOT NULL,
  PRIMARY KEY (pessoa_juridica_id, endereco_id, tipo_endereco_id),
  INDEX fk_endereco_has_pessoa_juridica_pessoa_juridica1_idx (pessoa_juridica_id ASC) VISIBLE,
  INDEX fk_endereco_has_pessoa_juridica_endereco1_idx (endereco_id ASC) VISIBLE,
  INDEX fk_endereco_has_pessoa_juridica_tipo_endereco1_idx (tipo_endereco_id ASC) VISIBLE,
  CONSTRAINT fk_endereco_has_pessoa_juridica_endereco1
    FOREIGN KEY (endereco_id)
    REFERENCES trabalho_final_db.endereco (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_endereco_has_pessoa_juridica_pessoa_juridica1
    FOREIGN KEY (pessoa_juridica_id)
    REFERENCES trabalho_final_db.pessoa_juridica (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_endereco_has_pessoa_juridica_tipo_endereco1
    FOREIGN KEY (tipo_endereco_id)
    REFERENCES trabalho_final_db.tipo_endereco (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.login
-- Informacoes inerentes a dados de acesso de um usuario pessoa fisica ao sistema de controle da loja
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.login (
  id INT NOT NULL AUTO_INCREMENT,
  nome_usuario VARCHAR(30) NOT NULL,
  senha VARCHAR(255) NOT NULL,
  pessoa_fisica_id INT NOT NULL,
  data_cadastro DATE NOT NULL,
  ativo CHAR(1) BINARY NOT NULL,
  PRIMARY KEY (id, pessoa_fisica_id),
  UNIQUE INDEX senha_UNIQUE (senha ASC) VISIBLE,
  UNIQUE INDEX nome_usuario_UNIQUE (nome_usuario ASC) VISIBLE,
  INDEX fk_login_pessoa_fisica1_idx (pessoa_fisica_id ASC) VISIBLE,
  CONSTRAINT fk_login_pessoa_fisica1
    FOREIGN KEY (pessoa_fisica_id)
    REFERENCES trabalho_final_db.pessoa_fisica (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.representante
-- Informacoes inerentes ao representante comercial que intermediou a transacao, onde este podera representar mais de uma pessoa juridica
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.representante (
  id INT NOT NULL AUTO_INCREMENT,
  pessoa_juridica_id INT NOT NULL,
  pessoa_fisica_id INT NOT NULL,
  PRIMARY KEY (id, pessoa_juridica_id, pessoa_fisica_id),
  INDEX fk_pessoa_juridica_has_pessoa_fisica_pessoa_fisica1_idx (pessoa_fisica_id ASC) VISIBLE,
  INDEX fk_pessoa_juridica_has_pessoa_fisica_pessoa_juridica1_idx (pessoa_juridica_id ASC) VISIBLE,
  CONSTRAINT fk_pessoa_juridica_has_pessoa_fisica_pessoa_juridica1
    FOREIGN KEY (pessoa_juridica_id)
    REFERENCES trabalho_final_db.pessoa_juridica (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_pessoa_juridica_has_pessoa_fisica_pessoa_fisica1
    FOREIGN KEY (pessoa_fisica_id)
    REFERENCES trabalho_final_db.pessoa_fisica (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.forma_pagamento
-- Informcoes inerentes ao tipo de forma de pagamento usado na transacao: cartao de credito ou debito, boleto, PIX, etc
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.forma_pagamento (
  id INT NOT NULL AUTO_INCREMENT,
  descricao VARCHAR(20) NOT NULL,
  PRIMARY KEY (id)
);

-- -----------------------------------------------------
-- Table trabalho_final_db.tipo_transacao
-- Informacoes inerentes ao tipo de transacao efetuada: compra ou venda
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.tipo_transacao (
  id INT NOT NULL AUTO_INCREMENT,
  descricao VARCHAR(45) NOT NULL,
  PRIMARY KEY (id)
);

-- -----------------------------------------------------
-- Table trabalho_final_db.transacao
-- Informacoes inerentes a transacaco (compra ou venda) feita
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.transacao (
  id INT NOT NULL AUTO_INCREMENT,
  data_compra DATETIME(6) NOT NULL,
  valor_total FLOAT NOT NULL,
  numero_parcelas INT NOT NULL,
  representante_id INT NOT NULL,
  forma_pagamento_id INT NOT NULL,
  tipo_transacao_id INT NOT NULL,
  PRIMARY KEY (id, representante_id, forma_pagamento_id, tipo_transacao_id),
  INDEX fk_compra_representante1_idx (representante_id ASC) VISIBLE,
  INDEX fk_compra_forma_pagamento1_idx (forma_pagamento_id ASC) VISIBLE,
  INDEX fk_transacao_tipo_transacao1_idx (tipo_transacao_id ASC) VISIBLE,
  CONSTRAINT fk_compra_representante1
    FOREIGN KEY (representante_id)
    REFERENCES trabalho_final_db.representante (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_compra_forma_pagamento1
    FOREIGN KEY (forma_pagamento_id)
    REFERENCES trabalho_final_db.forma_pagamento (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_transacao_tipo_transacao1
    FOREIGN KEY (tipo_transacao_id)
    REFERENCES trabalho_final_db.tipo_transacao (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.materia_prima
-- Informações inerentes a materias primas a serem utilizadas na confeccoes de camisetas
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.materia_prima (
  id INT NOT NULL AUTO_INCREMENT,
  descricao VARCHAR(45) NOT NULL,
  quantidade_estoque INT NOT NULL,
  PRIMARY KEY (id)
);

-- -----------------------------------------------------
-- Table trabalho_final_db.item_compra
-- Informacoes inerentes aos item existentes nas transacoers do tipo compra
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.item_compra (
  id INT NOT NULL,
  quantidade FLOAT NOT NULL,
  valor_unitario FLOAT NOT NULL,
  valor_imposto FLOAT NOT NULL,
  valor_total FLOAT NOT NULL,
  transacao_id INT NOT NULL,
  materia_prima_id INT NOT NULL,
  PRIMARY KEY (id, transacao_id, materia_prima_id),
  INDEX fk_materia_prima_has_compra_materia_prima1_idx (materia_prima_id ASC) VISIBLE,
  INDEX fk_item_compra_transacao1_idx (transacao_id ASC) VISIBLE,
  CONSTRAINT fk_materia_prima_has_compra_materia_prima1
    FOREIGN KEY (materia_prima_id)
    REFERENCES trabalho_final_db.materia_prima (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_item_compra_transacao1
    FOREIGN KEY (transacao_id)
    REFERENCES trabalho_final_db.transacao (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.tamanho
-- Inforcoes inerentes ao cadastro do tamanho das camisetas (P, M, G, XL, L)
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.tamanho (
  id INT NOT NULL AUTO_INCREMENT,
  descricao VARCHAR(45) NOT NULL,
  PRIMARY KEY (id)
);

-- -----------------------------------------------------
-- Table trabalho_final_db.cor
-- Inforcoes inerentes ao cadastro de cores (camisetas e materia prima)
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.cor (
  id INT NOT NULL AUTO_INCREMENT,
  descricao VARCHAR(45) NOT NULL,
  PRIMARY KEY (id)
);

-- -----------------------------------------------------
-- Table trabalho_final_db.medida
-- Inforcoes inerentes ao cadastro de medidas (ex.: torax, 50cm)
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.medida (
  id INT NOT NULL AUTO_INCREMENT,
  descricao VARCHAR(45) NOT NULL,
  dimensao FLOAT NOT NULL,
  PRIMARY KEY (id)
);

-- -----------------------------------------------------
-- Table trabalho_final_db.medida_tamanho
-- Inforcoes inerentes ao cadastro das medidas relacionadas a cada tamanho de camisetas
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.medida_tamanho (
  id VARCHAR(45) NOT NULL,
  tamanho_id INT NOT NULL,
  medida_id INT NOT NULL,
  PRIMARY KEY (id, medida_id, tamanho_id),
  INDEX fk_tamanho_has_medida_medida1_idx (medida_id ASC) VISIBLE,
  INDEX fk_tamanho_has_medida_tamanho1_idx (tamanho_id ASC) VISIBLE,
  CONSTRAINT fk_tamanho_has_medida_tamanho1
    FOREIGN KEY (tamanho_id)
    REFERENCES trabalho_final_db.tamanho (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_tamanho_has_medida_medida1
    FOREIGN KEY (medida_id)
    REFERENCES trabalho_final_db.medida (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.camiseta
-- Inforcoes inerentes ao cadastro de camisetas e sua identificação (modelo)
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.camiseta (
  id INT NOT NULL AUTO_INCREMENT,
  modelo VARCHAR(45) NOT NULL,
  PRIMARY KEY (id)
);

-- -----------------------------------------------------
-- Table trabalho_final_db.materia_prima_camiseta
-- Inforcoes inerentes ao cadastro das materias primas de cada camiseta, ou seja, os materiais necessários para confeccionar cada camiseta considerando seu tamanho
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.materia_prima_camiseta (
  camiseta_id INT NOT NULL,
  materia_prima_id INT NOT NULL,
  tamanho_id INT NOT NULL,
  quantidade_fabricacao FLOAT NOT NULL,
  PRIMARY KEY (camiseta_id, materia_prima_id, tamanho_id),
  INDEX fk_materia_prima_has_camiseta_camiseta1_idx (camiseta_id ASC) VISIBLE,
  INDEX fk_materia_prima_has_camiseta_materia_prima1_idx (materia_prima_id ASC) VISIBLE,
  INDEX fk_materia_prima_camiseta_tamanho1_idx (tamanho_id ASC) VISIBLE,
  CONSTRAINT fk_materia_prima_has_camiseta_materia_prima1
    FOREIGN KEY (materia_prima_id)
    REFERENCES trabalho_final_db.materia_prima (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_materia_prima_has_camiseta_camiseta1
    FOREIGN KEY (camiseta_id)
    REFERENCES trabalho_final_db.camiseta (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_materia_prima_camiseta_tamanho1
    FOREIGN KEY (tamanho_id)
    REFERENCES trabalho_final_db.tamanho (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.cor_camiseta
-- Inforcoes inerentes ao cadastro das cores existentes na camiseta
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.cor_camiseta (
  camiseta_id INT NOT NULL,
  cor_id INT NOT NULL,
  PRIMARY KEY (camiseta_id, cor_id),
  INDEX fk_cor_has_camiseta_camiseta1_idx (camiseta_id ASC) VISIBLE,
  INDEX fk_cor_has_camiseta_cor1_idx (cor_id ASC) VISIBLE,
  CONSTRAINT fk_cor_has_camiseta_cor1
    FOREIGN KEY (cor_id)
    REFERENCES trabalho_final_db.cor (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_cor_has_camiseta_camiseta1
    FOREIGN KEY (camiseta_id)
    REFERENCES trabalho_final_db.camiseta (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.tamanho_camiseta
-- Inforcoes inerentes aos tamanhos que cada camiseta pode possui 
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.tamanho_camiseta (
  camiseta_id INT NOT NULL,
  tamanho_id INT NOT NULL,
  quantidade_estoque INT NOT NULL,
  PRIMARY KEY (camiseta_id, tamanho_id),
  INDEX fk_camiseta_has_tamanho_tamanho1_idx (tamanho_id ASC) VISIBLE,
  INDEX fk_camiseta_has_tamanho_camiseta1_idx (camiseta_id ASC) VISIBLE,
  CONSTRAINT fk_camiseta_has_tamanho_camiseta1
    FOREIGN KEY (camiseta_id)
    REFERENCES trabalho_final_db.camiseta (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_camiseta_has_tamanho_tamanho1
    FOREIGN KEY (tamanho_id)
    REFERENCES trabalho_final_db.tamanho (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.item_venda
-- Informacoes inerentes aos item existentes nas transacoers do tipo venda
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.item_venda (
  id INT NOT NULL,
  camiseta_id INT NOT NULL,
  quantidade INT NOT NULL,
  valor_unitario FLOAT NOT NULL,
  valor_imposto FLOAT NOT NULL,
  valor_total FLOAT NOT NULL,
  transacao_id INT NOT NULL,
  PRIMARY KEY (id, camiseta_id, transacao_id),
  INDEX fk_camiseta_has_venda_camiseta1_idx (camiseta_id ASC) VISIBLE,
  INDEX fk_item_venda_transacao1_idx (transacao_id ASC) VISIBLE,
  CONSTRAINT fk_camiseta_has_venda_camiseta1
    FOREIGN KEY (camiseta_id)
    REFERENCES trabalho_final_db.camiseta (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_item_venda_transacao1
    FOREIGN KEY (transacao_id)
    REFERENCES trabalho_final_db.transacao (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.materia_prima_cor
-- Inforcoes inerentes ao cadastro da cor da materia prima (por exemplo cor para o tipo de materia prima "tinta" )
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.materia_prima_cor (
  materia_prima_id INT NOT NULL,
  cor_id INT NOT NULL,
  PRIMARY KEY (materia_prima_id, cor_id),
  INDEX fk_materia_prima_has_cor_cor1_idx (cor_id ASC) VISIBLE,
  INDEX fk_materia_prima_has_cor_materia_prima1_idx (materia_prima_id ASC) VISIBLE,
  CONSTRAINT fk_materia_prima_has_cor_materia_prima1
    FOREIGN KEY (materia_prima_id)
    REFERENCES trabalho_final_db.materia_prima (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_materia_prima_has_cor_cor1
    FOREIGN KEY (cor_id)
    REFERENCES trabalho_final_db.cor (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.entrega
-- Inforcoes inerentes ao cadastro das entregas da transacao efetuada, poderá haver mais de uma entrega para cada transacao
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.entrega (
  id INT NOT NULL AUTO_INCREMENT,
  data_entrega DATETIME(6) NOT NULL,
  nome_entregador VARCHAR(45) NOT NULL,
  nome_recebedor VARCHAR(45) NULL,
  documento_recebedor VARCHAR(13) NULL,
  realizada CHAR(1) BINARY NOT NULL,
  codigo_rastreamento VARCHAR(20) NOT NULL,
  transacao_id INT NOT NULL,
  PRIMARY KEY (id, transacao_id),
  INDEX fk_entrega_transacao1_idx (transacao_id ASC) VISIBLE,
  CONSTRAINT fk_entrega_transacao1
    FOREIGN KEY (transacao_id)
    REFERENCES trabalho_final_db.transacao (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

-- -----------------------------------------------------
-- Table trabalho_final_db.telefone
-- Inforcoes inerentes ao cadastro do tipo de contato e o número do contato para cada pessoa
-- -----------------------------------------------------
CREATE TABLE trabalho_final_db.telefone (
  id INT NOT NULL AUTO_INCREMENT,
  descricao VARCHAR(20) NOT NULL,
  numero VARCHAR(15) NOT NULL,
  pessoa_id INT NOT NULL,
  PRIMARY KEY (id, pessoa_id),
  UNIQUE INDEX numero_UNIQUE (numero ASC) VISIBLE,
  INDEX fk_telefone_pessoa1_idx (pessoa_id ASC) VISIBLE,
  CONSTRAINT fk_telefone_pessoa1
    FOREIGN KEY (pessoa_id)
    REFERENCES trabalho_final_db.pessoa (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);